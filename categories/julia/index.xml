<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia on Trans lusion</title>
    <link>http://translusion.github.com/categories/julia/</link>
    <description>Recent content in Julia on Trans lusion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://translusion.github.com/categories/julia/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Julia One Liners compared to Scala</title>
      <link>http://translusion.github.com/posts/julia-one-liners/</link>
      <pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-one-liners/</guid>
      <description>

&lt;p&gt;This was inspired by the blog post &lt;a href=&#34;https://mkaz.github.io/2011/05/31/10-scala-one-liners-to-impress-your-friends/&#34;&gt;10 Scala One Liners to Impress Your Friends&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-multiple-each-item-in-a-list-by-2:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;1. Multiple Each Item in a List by 2&lt;/h3&gt;

&lt;p&gt;Original Scala version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 to 10) map { _ * 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the Julia version is clearer. The &lt;code&gt;x-&amp;gt;2x&lt;/code&gt; notation for anonymous function looks very similar to regular mathematical notation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map(x-&amp;gt;2x, 1:10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-sum-a-list-of-numbers:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;2. Sum a List of Numbers&lt;/h3&gt;

&lt;p&gt;Sums numbers from 1 to 1000 in Scala either by using &lt;code&gt;reduceLeft&lt;/code&gt; or &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 to 1000).reduceLeft( _ + _ )
(1 to 1000).sum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very similar in Julia, but the &lt;code&gt;reduce&lt;/code&gt; seems more elegant in that you don’t have to explicitly give the arguments to &lt;code&gt;+&lt;/code&gt;. &lt;code&gt;reduce&lt;/code&gt; takes a binary operator. So you just pass that. You don’t have to tell Julia how to add numbers with it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reduce(+, 1:1000)
sum(1:1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-verify-if-exists-in-a-string:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;3. Verify if Exists in a String&lt;/h3&gt;

&lt;p&gt;Check if a word in a word list is present in a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val wordList = List(&amp;quot;scala&amp;quot;, &amp;quot;akka&amp;quot;, &amp;quot;play framework&amp;quot;, &amp;quot;sbt&amp;quot;, &amp;quot;typesafe&amp;quot;)
val tweet = &amp;quot;This is an example tweet talking about scala and sbt.&amp;quot;

(wordList.foldLeft(false)( _ || tweet.contains(_) ))
wordList.exists(tweet.contains)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I really think the Scala version is rather cryptic. I can not really guess how this works without learning more about Scala. In Julia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wordlist = [&amp;quot;scala&amp;quot;, &amp;quot;akka&amp;quot;, &amp;quot;play framework&amp;quot;, &amp;quot;sbt&amp;quot;, &amp;quot;typesafe&amp;quot;]
tweet = &amp;quot;This is an example tweet talking about scala and sbt.&amp;quot;
any(word-&amp;gt;contains(tweet, word), wordlist)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-read-in-a-file:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;4. Read in a File&lt;/h3&gt;

&lt;p&gt;This is a line for reading a file as a string in Scala. While that is apparently impressive by Java standards it is rather verbose for other languages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val fileText = io.Source.fromFile(&amp;quot;data.txt&amp;quot;).mkString
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Julia this would just be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filetext = readall(“data.txt”)`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another Scala example of reading the file and turing every line into an element in list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val fileLines = io.Source.fromFile(&amp;quot;data.txt&amp;quot;).getLines.toList
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also the sort of thing that is trivial in Julia. Julia’s file open command can take a function as an argument and provide that function with a stream object and then close the file after the function is finished. There are many functions like &lt;code&gt;readall&lt;/code&gt;, &lt;code&gt;readlines&lt;/code&gt; etc which takes streams as arguments. So you can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filelines = open(readlines, &amp;quot;data.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-happy-birthday-to-you:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;5. Happy Birthday to You!&lt;/h3&gt;

&lt;p&gt;Here the Scala one ends up looking a bit better as Julia doesn’t have anything like &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 to 4).map { i =&amp;gt; &amp;quot;Happy Birthday &amp;quot; + (if (i == 3) &amp;quot;dear NAME&amp;quot; else &amp;quot;to You&amp;quot;) }.foreach { println }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Julia it is clearer to do it in two steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lines = map(1:4) do i 
        &amp;quot;Happy Birthday &amp;quot; * 
        if i == 3 &amp;quot;dear NAME&amp;quot; else &amp;quot;to You&amp;quot; end 
end
print(join(lines, &amp;quot;\n&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to notice though is that you can write this stuff in Julia with a lot less clutter of parenthesis and curly braces. In Scala need 4 parenthesis for the &lt;code&gt;if&lt;/code&gt; statement, while Julia avoids this and use a single &lt;code&gt;end&lt;/code&gt; keyword instead.&lt;/p&gt;

&lt;h3 id=&#34;6-filter-list-of-numbers:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;6. Filter list of numbers&lt;/h3&gt;

&lt;p&gt;Partition a list of students into two categories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val (passed, failed) = List(49, 58, 76, 82, 88, 90) partition ( _ &amp;gt; 60 )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no function like partition in Julia so you would have to write this using multiple lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grades = [49, 58, 76, 82, 88, 90]
passed = filter(grade-&amp;gt;grade &amp;gt; 60, grades)
failed = filter(grade-&amp;gt;grade &amp;lt;= 60, grades)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But of course nothing prevents us from defining a &lt;code&gt;partition&lt;/code&gt; function in Julia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function partition{T}(p, xs::Vector{T})
    as = Vector{T}()
    bs = Vector{T}()
    for x in xs
        if p(x)
            push!(as, x)
        else
            push!(bs, x)
        end
    end
    (as, bs)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which then would allow us to do like in Scala:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;passed, failed = partition(grade-&amp;gt;grade &amp;gt; 60, grades)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-fetch-and-parse-an-xml-web-service:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;7. Fetch and Parse an XML web service&lt;/h3&gt;

&lt;p&gt;Here’s an example fetching the Twitter search feed in Scala.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val results = XML.load(&amp;quot;http://search.twitter.com/search.atom?&amp;amp;q=scala&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don’t know anything about XML stuff in Julia, so I will not attempt and alternative.&lt;/p&gt;

&lt;h3 id=&#34;8-find-minimum-or-maximum-in-a-list:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;8. Find minimum (or maximum) in a List&lt;/h3&gt;

&lt;p&gt;Another couple of examples using reduceLeft to iterate through a list and apply a function. Added simpler examples of the method min/max on the list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List(14, 35, -7, 46, 98).reduceLeft ( _ min _ )
List(14, 35, -7, 46, 98).min

List(14, 35, -7, 46, 98).reduceLeft ( _ max _ )
List(14, 35, -7, 46, 98).max
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again this is the sort of thing were Julia is very succinct.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reduce(min, [14, 35, -7, 46, 98])
min(14, 35, -7, 46, 98)

reduce(max, [14, 35, -7, 46, 98])
max(14, 35, -7, 46, 98)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-parallel-processing:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;9. Parallel Processing&lt;/h3&gt;

&lt;p&gt;The following one-liner would give you parallel processing over the list in Scala.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val result = dataList.par.map( line =&amp;gt; processItem(line) )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-sieve-of-eratosthenes:ae7a89fe0b43ee32899fb53a25a8c307&#34;&gt;10. Sieve of Eratosthenes&lt;/h3&gt;

&lt;p&gt;We got this crazy line from Scala, but no I am not going to figure out what this really does and rewrite it in Julia.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(n: Int) =&amp;gt; (2 to n) |&amp;gt; (r =&amp;gt; r.foldLeft(r.toSet)((ps, x) =&amp;gt; if (ps(x)) ps -- (x * x to n by x) else ps))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perhaps one day when I am &lt;em&gt;very&lt;/em&gt; bored I’ll revisit this and update the blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tricks in Julia</title>
      <link>http://translusion.github.com/posts/julia-tricks/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-tricks/</guid>
      <description>

&lt;p&gt;After doing various small Julia projects I&amp;rsquo;ve had to learn a number of tricks or solutions to small problems, that I think would be usefull to collect:&lt;/p&gt;

&lt;h3 id=&#34;parsing-strings:59bb671a63313562ed2551763f52b78c&#34;&gt;Parsing Strings&lt;/h3&gt;

&lt;p&gt;Extract 3 numbers from a string into 3 variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a, b, c = map(int, split(&amp;quot;11 12 13&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialization:59bb671a63313562ed2551763f52b78c&#34;&gt;Initialization&lt;/h3&gt;

&lt;p&gt;There are some gotchas with Julia initialization if you come from C/C++ background although this should not be so odd to Python or Ruby developers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; type Point
    x::Int
    y::Int
  end

&amp;gt; points = fill(Point(0, 0), 4)
4-element Array{Point,1}:
 Point(0,0)
 Point(0,0)
 Point(0,0)
 Point(0,0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks all fine, until you make a change and get this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; points[2].x = 20
&amp;gt; points
4-element Array{Point,1}:
 Point(20,0)
 Point(20,0)
 Point(20,0)
 Point(20,0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was probably not as expected. The reason for this is that references to the created &lt;code&gt;Point&lt;/code&gt; object in fill is copied not the values themselves. So what we actually got to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;points = [Point(0, 0) for _ in 1:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;integers:59bb671a63313562ed2551763f52b78c&#34;&gt;Integers&lt;/h2&gt;

&lt;p&gt;There are a lot of issues with just dealing with something simple as integers. First of all how do yo get the min and max values of the integers you are using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; typemax(Int8)
127
&amp;gt; typemax(Uint8)
0xff # which is 255 decimal
&amp;gt; typemin(Int8)
-128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One also has to remember that Julia integers do not get promoted to larger values when overflowing. So e.g. taking the factorial of a really big number like 100 requires using &lt;code&gt;BigInt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; factorial(BigInt(25))
 15511210043330985984000000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;division:59bb671a63313562ed2551763f52b78c&#34;&gt;Division&lt;/h3&gt;

&lt;p&gt;One thing I got confused by being more used to C/C++ is how division works in Julia. There are several ways of doing it depending on what you want. Using integers in division does not produce integers automatically. The default is to give floating point answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 10 / 6
1.6666666666666667
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which has of course the minor inaccuracies of floating point arithmetic. If you want accurate results you can compute fractions with the &lt;code&gt;//&lt;/code&gt; division operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; a = 10 // 6
5//3
&amp;gt; a.num
5
&amp;gt; a.div
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to work with C/C++ style division then we use the &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;mod&lt;/code&gt; functions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; div(10, 6)
1
&amp;gt; rem(10, 6)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C/C++ style remainder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 10 % 6
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modulus is not quite the same as remaineder. E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; rem(-21, 4)
-1
&amp;gt; mod(-21, 4)
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With modulus we can imagine doing calculations on a clock.&lt;/p&gt;

&lt;h3 id=&#34;reading-files:59bb671a63313562ed2551763f52b78c&#34;&gt;Reading files&lt;/h3&gt;

&lt;p&gt;Julia has some nice ways you can compose functions to read files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lines = open(readlines, &amp;quot;myfile.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This corresponds to writing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f = open(&amp;quot;myfile.txt&amp;quot;)
lines = readlines(f)
close(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the julia &lt;code&gt;do end&lt;/code&gt; syntax sugar you can use this to conveniently read a file and not forget to close it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open(&amp;quot;myfile.txt&amp;quot;) do f
   println(readline(f))     # print out first line in file
end                         # file stream automatically closes here
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;working-with-dates:59bb671a63313562ed2551763f52b78c&#34;&gt;Working with dates&lt;/h3&gt;

&lt;p&gt;This is just to show how to deal with a common case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; using Dates
&amp;gt; (date, time) = split(&amp;quot;5/8/2014 0:16:03&amp;quot;)
2-element Array{SubString{ASCIIString},1}:
 &amp;quot;5/8/2014&amp;quot;
 &amp;quot;0:16:03&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then as shown before we can unpack an array into separate variables like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; year, month, day = reverse(map(int, split(date, &#39;/&#39;)))
3-element Array{Int64,1}:
 2014
    8
    5
&amp;gt; date = Date(year, month, day)
2014-08-05
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also do this in one go by unpacking an array into function arguments using &lt;code&gt;...&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Date(reverse(map(int, split(date, &#39;/&#39;)))...)
2014-08-05
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enumeration:59bb671a63313562ed2551763f52b78c&#34;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Regular enumeration in Julia is straightforward but it might not be obvious how you enumerate over both values and keys or indicies in an array or dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; for (index, value) in enumerate([&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;])
           println(index, &amp;quot;: &amp;quot;, value)
       end
1: one
2: two
3: three
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessing-fields-of-a-type:59bb671a63313562ed2551763f52b78c&#34;&gt;Accessing fields of a type&lt;/h3&gt;

&lt;p&gt;The syntax for accessing fields known at compile time is similar in Julia as in most other languages with Algol syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type FooBar
    foo::Int64
    bar::String
end

&amp;gt; a = FooBar(42, &amp;quot;The answer to everything&amp;quot;)
&amp;gt; a.bar
&amp;quot;The answer to everything&amp;quot;
&amp;gt; a.foo
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However accessing fields not known at compile time is different. Imagine the user inputs the name of a field to access or the names of fields are read of a file. Unlike Ruby and Python, Julia&amp;rsquo;s objects are not implemented as hashtables. So accessing fields given a name is a bit different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; a.(:bar)
&amp;quot;The answer to everything&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you only got the name of a field as a string you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; a.(symbol(&amp;quot;bar&amp;quot;))
&amp;quot;The answer to everything&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out what fields actually exist you can use &lt;code&gt;names&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; names(FooBar)
2-element Array{Symbol,1}:
 :foo
 :bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively if you got an instance you can see both the name of the fields and their values with &lt;code&gt;dump&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dump(a)
FooBar 
  foo: Int64 42
  bar: ASCIIString &amp;quot;The answer to everything&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of these code snippets or approaches I picked up from doing small things like implement an algorithm in &lt;a href=&#34;https://projecteuler.net&#34;&gt;project Euler&lt;/a&gt;. I hope to write some bigger piece of code and see how Julia stacks up and how well suited Julia is for more software engineering type of challenges.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beautiful Julia: Cool language constructs and Tricks for Beginners</title>
      <link>http://translusion.github.com/posts/beautiful-julia/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/beautiful-julia/</guid>
      <description>

&lt;p&gt;I just read &lt;a href=&#34;http://www.hackerearth.com/notes/praveen97uma/beautiful-python-some-cool-language-constructs-and-tricks-for-beginners/&#34;&gt;this blog&lt;/a&gt; about cool language constructs in Python. Before clicking it I thought to myself: are there cool things only Python can do or could I easily replicate this in my favorite script language &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;So without further ado, her are some examples.&lt;/p&gt;

&lt;h3 id=&#34;reverse-an-iterable:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Reverse an iterable&lt;/h3&gt;

&lt;p&gt;There are two ways of doing this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a = [1, 2, 4]
 3-element Array{Int64,1}:
  1
  2
  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious way is the &lt;code&gt;reverse&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; reverse(a)
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can also do something similar to the Python example, exept Julia requires you to be a bit more explicit about the start and end of the slice&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a[end:-1:1]
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This of course works for any types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; reverse(b)
(4,3,2)

julia&amp;gt; b[end:-1:1]
(4,3,2)

julia&amp;gt; c = &amp;quot;This is a string&amp;quot;
&amp;quot;This is a string&amp;quot;

julia&amp;gt; reverse(c)
&amp;quot;gnirts a si sihT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Julia follows the Ruby convention of suffixing with &lt;code&gt;!&lt;/code&gt; if the function is mutating, so we can be confident these functions created copies.&lt;/p&gt;

&lt;h3 id=&#34;swapping-the-values-of-two-variables:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Swapping the values of two variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; a, b = 1, 2
(1,2)

julia&amp;gt; a, b = b, a
(2,1)

julia&amp;gt; a
2

julia&amp;gt; b
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the python example, the author Praveen Kumar disassembled the Python code to demonstrate how it worked by showing the bytecode. That will be quite different for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; as Julia JITs different implementations based on the types of arguments. That is why Julia is so fast. E.g. when we define a function that swaps in Julia we get a generic function which will be specialized when called by the Just in Time compiler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; foo(a, b) = a, b = b, a
foo (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when dumping the assembly with &lt;code&gt;code_native&lt;/code&gt; we have to specify what the types of arguments  will be as second argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_native(foo, (Int, Int))
    .section    __TEXT,__text,regular,pure_instructions
Filename: none
Source line: 1
    push    RBP
    mov RBP, RSP
Source line: 1
    movq    XMM1, RDI
    movq    XMM0, RSI
    punpcklqdq  XMM0, XMM1      ## xmm0 = xmm0[0],xmm1[0]
    pop RBP
    ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want the bytecode like Python we get something that I consider less readable as it is LLVM based which contains a lot of type information to be able to generate efficient machien code output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_llvm(foo, (Int, Int))

define &amp;lt;2 x i64&amp;gt; @&amp;quot;julia_foo;20220&amp;quot;(i64, i64) {
top:
  %2 = insertelement &amp;lt;2 x i64&amp;gt; undef, i64 %1, i32 0, !dbg !1422, !julia_type !1423
  %3 = insertelement &amp;lt;2 x i64&amp;gt; %2, i64 %0, i32 1, !dbg !1422, !julia_type !1423
  ret &amp;lt;2 x i64&amp;gt; %3, !dbg !1422
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn&amp;rsquo;t obviously readable so we need to consult the &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html&#34;&gt;LLVM reference&lt;/a&gt; manual. &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html#i_insertelement&#34;&gt;insertelement&lt;/a&gt; is instruction which insert an element into a vector at given index.&lt;/p&gt;

&lt;p&gt;First part &lt;code&gt;&amp;lt;2 x i64&amp;gt;&lt;/code&gt; is a type annotation saying we are operating on a 2 element 64 bit integer vector.&lt;/p&gt;

&lt;p&gt;First argument is the vector register to operate on. In the first case that is &lt;code&gt;undef&lt;/code&gt; while in the next line it is &lt;code&gt;%2&lt;/code&gt;, which is where the result of the first line was put.&lt;/p&gt;

&lt;p&gt;Second argument &lt;code&gt;i64 %1&lt;/code&gt; says we are inserting a 64 bit integer element. Where is given in third argument: &lt;code&gt;i32 0&lt;/code&gt;. Insert at index 0 (given as a 32 bit integer).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave it as a readers excercise to figure out exactly how this performs a swap as going into the nitty bitty details of this was not the intention of this blog post.&lt;/p&gt;

&lt;h3 id=&#34;enumerate:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Enumerate&lt;/h3&gt;

&lt;p&gt;Interestingly the &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; approach for iterating over both index and value is almost identical to that of Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; for (index, value) in enumerate([&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;zoo&amp;quot;])
         println(index, &amp;quot; &amp;quot; , value)
       end
1 foo
2 bar
3 zoo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;splitting-a-string-into-a-list-of-words-and-joining-them-back:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Splitting a string into a list of words and joining them back&lt;/h3&gt;

&lt;p&gt;Splitting and joining is similar to Python except Julia isn&amp;rsquo;t really object oriented so function name comes first as Julia uses multiple dispatch to decide which implementation to call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; b = split(&amp;quot;This is a string&amp;quot;)
4-element Array{SubString{ASCIIString},1}:
 &amp;quot;This&amp;quot;  
 &amp;quot;is&amp;quot;    
 &amp;quot;a&amp;quot;     
 &amp;quot;string&amp;quot;

julia&amp;gt; join(b, &amp;quot; &amp;quot;)
&amp;quot;This is a string&amp;quot;

julia&amp;gt; join(b, &amp;quot;, &amp;quot;)
&amp;quot;This, is, a, string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesting functions call is sometimes hard to read, so Julia offers the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator to write the code in similar sequence as with object oriented languages .e.g:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; &amp;quot;This is a string&amp;quot; |&amp;gt; split |&amp;gt; join
&amp;quot;Thisisastring&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehensions:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;List Comprehensions&lt;/h3&gt;

&lt;p&gt;The traditional imperative way transforming on list to a new one is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = String[]
0-element Array{String,1}

julia&amp;gt; for word in L
           push!(M, word[1:3])
       end

julia&amp;gt; M
4-element Array{String,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite similar to the Python example except Julia lists havea type so you have to specify that it is a String. You can create a python like array but then you need to specify that it takes any element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = Any[]
0-element Array{Any,1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With list comperhensions you can do this more elegantly with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = [word[1:3] for word in L]
4-element Array{Any,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; it would be more idiomatic to express what you are doing. E.g. in this case we are mapping from one array to another which we can express like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = map(word -&amp;gt;  word[1:3], L)
4-element Array{ASCIIString,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to filter a list by producing a new list containg only the elements with length greater than 5 we would do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for word in L
  if length(word) &amp;gt; 5
    push!(M, word)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Python we could solve this with a list comperhension however with Julia you have to explicity state that you are filtering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M = filter(word -&amp;gt; length(word) &amp;gt; 5, L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for this is that Julia has bultin support for multidimensional arrays, given that it was designed for scientific computing where this is important. There is no natural way to filter a multi dimensional array, as e.g. every row in a matrix needs to have the same number of columns.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Munching Data with Julia</title>
      <link>http://translusion.github.com/posts/munchingdata-julia/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/munchingdata-julia/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently performed a survey at my work using &lt;a href=&#34;http://www.google.com/google-d-s/createforms.html&#34;&gt;Google form&lt;/a&gt;, unfortunatle the data wasn&amp;rsquo;t usable right out of the box, because it my company allowed people to register an answer multiple times, but one person should just have one vote.&lt;/p&gt;

&lt;p&gt;I chose to clean the data with &lt;a href=&#34;http://julialang.org&#34;&gt;the Julia programming language&lt;/a&gt;, which might not be the best choice for this sort of thing. Not because julia isn&amp;rsquo;t suited but because SQL, sed or awk might do such a specialized and simple task faster. Unfortunately I am crappy at all 3. The data looked like this (anonymized):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5/8/2014 10:32:14   spam@mycompany.no   Bonus   2,5%   40%       4,42%
5/8/2014 10:35:03   bar@mycompany.no    Higher salary     2,9%   37,5%    3,9%
5/8/2014 10:41:10   spam@mycompany.no   Bonus   2,5%   40%       4,42%
5/8/2014 10:45:10   foo@mycompany.no    Higher salary    2,9%   37,5%    3,9%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I exported it with tab as separator since some of the columns used comma in the text. In Europe we often use comma instead of dot for separating decimals.&lt;/p&gt;

&lt;p&gt;So the task was to eliminate to double or more votes, keeping only the most recent choice. So e.g. in our example &lt;em&gt;spam&lt;/em&gt; voted twice. So the 1st line needs to be elimenated and the 3rd kept.&lt;/p&gt;

&lt;h3 id=&#34;read-the-data:39090f6c1d52d850ae569d06cd709fcb&#34;&gt;Read the data&lt;/h3&gt;

&lt;p&gt;First we read in our data. Indicating that data is separated with tab and that first line is a header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ourdata, header) = readdlm(&amp;quot;result.tsv&amp;quot;, &#39;\t&#39;, has_header=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a 2D array (matrix) which sounds neat. Well it is quite neat in a lot of ways. I can ask for e.g. the whole second column containing the email of the respondents with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ourdata[:,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I instead wanted the 3rd row I could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ourdata[3, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is &lt;strong&gt;NOT neat&lt;/strong&gt; about it compared to the regular arrays within arrays found in languages such a python and ruby is that you can&amp;rsquo;t process this with a &lt;code&gt;foreach&lt;/code&gt; type of construct. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for row in ourdata
   dostuff(row)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;row&lt;/code&gt; will in this case just be a substring and not an actual array object.&lt;/p&gt;

&lt;h3 id=&#34;find-unique-rows:39090f6c1d52d850ae569d06cd709fcb&#34;&gt;Find unique rows&lt;/h3&gt;

&lt;p&gt;Instead you have to iterate by index:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byname = Dict{String, Any}()
for i in 1:size(ourdata,1)
    byname[ourdata[i, 2]] = ourdata[i, :]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is to record each line on email. Thus only the last line for a given email get stored. Previous duplicated gets discareded. Just what we want. &lt;code&gt;size(ourdata, 1)&lt;/code&gt; gives us the number of rows. &lt;code&gt;size(ourdata, 2)&lt;/code&gt; would have given number of columns. &lt;code&gt;length(ourdata)&lt;/code&gt; or &lt;code&gt;size(ourdata)&lt;/code&gt; would not have worked because this is not an array of arrays. So your usual python or ruby reflexes don&amp;rsquo;t apply.&lt;/p&gt;

&lt;h3 id=&#34;count-each-line-matching-a-predicate:39090f6c1d52d850ae569d06cd709fcb&#34;&gt;Count each line matching a predicate&lt;/h3&gt;

&lt;p&gt;So to check how many of our respondents wanted higher bonus we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count(values(byname)) do row
    row[3] == &amp;quot;Bonus   2,5%   40%       4,42%&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to get those who want higher salary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count(values(byname)) do row
    row[3] == &amp;quot;Higher salary    2,9%   37,5%    3,9%&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;working-with-dates-in-julia:39090f6c1d52d850ae569d06cd709fcb&#34;&gt;Working with Dates in Julia&lt;/h3&gt;

&lt;p&gt;When I first started looking at this problem, I thought I needed to work with dates, which wasn&amp;rsquo;t necessary because the data was already sorted by date and time, but if it wasn&amp;rsquo;t you need to get hold of the julia &lt;a href=&#34;https://github.com/karbarcca/Datetime.jl&#34;&gt;datetime package&lt;/a&gt;. There isn&amp;rsquo;t anything builtin to deal with dates. Here are some practical examples on how to use it. Our data had date and time like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5/8/2014 0:16:03
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which isn&amp;rsquo;t the format the package deals with date and time. So here are some tricks for how to convert:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(d, t) = split(&amp;quot;5/8/2014 0:16:03&amp;quot;) # Put date in d, and time t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then turn this into a formate our date creation function &lt;code&gt;date&lt;/code&gt; wants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date(reverse(map(int, split(d, &#39;/&#39;)))...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iteratively-creating-code-in-the-julia-repl:39090f6c1d52d850ae569d06cd709fcb&#34;&gt;Iteratively creating code in the Julia REPL&lt;/h3&gt;

&lt;p&gt;That was a &lt;em&gt;mouthfull&lt;/em&gt;. Usually when writing lines like this I develop them interactively by starting with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; split(d, &#39;/&#39;)
3-element Array{String,1}:
 &amp;quot;5&amp;quot;   
 &amp;quot;8&amp;quot;   
 &amp;quot;2014&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like what I wanted, but the data is string and I need integers so I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hit arrow up button to get back &lt;code&gt;split&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+A to go to start of line and write &lt;code&gt;map(int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+E to get to end of line and close it with &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives me the next line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; map(int, split(d, &#39;/&#39;))
3-element Array{Int64,1}:
    5
    8
 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks good, but not in reverse order compared to what &lt;code&gt;date&lt;/code&gt; wants. So we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; reverse(map(int, split(d, &#39;/&#39;)))
3-element Array{Int64,1}:
 2014
    8
    5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay so we are good, except &lt;code&gt;date&lt;/code&gt; doesn&amp;rsquo;t take an array as argument. So we need to explode our array to function arguments with the &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>