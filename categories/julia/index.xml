<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia on Translusion</title>
    <link>http://translusion.github.com/categories/julia/</link>
    <description>Recent content in Julia on Translusion</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© Erik Engheim 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 04 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://translusion.github.com/categories/julia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Julia One Liners compared to Scala</title>
      <link>http://translusion.github.com/posts/julia-one-liners/</link>
      <pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-one-liners/</guid>
      <description>This was inspired by the blog post 10 Scala One Liners to Impress Your Friends.
1. Multiple Each Item in a List by 2 Original Scala version
(1 to 10) map { _ * 2 }  I think the Julia version is clearer. The x-&amp;gt;2x notation for anonymous function looks very similar to regular mathematical notation.
map(x-&amp;gt;2x, 1:10)  2. Sum a List of Numbers Sums numbers from 1 to 1000 in Scala either by using reduceLeft or sum.</description>
    </item>
    
    <item>
      <title>Tricks in Julia</title>
      <link>http://translusion.github.com/posts/julia-tricks/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-tricks/</guid>
      <description>After doing various small Julia projects I&amp;rsquo;ve had to learn a number of tricks or solutions to small problems, that I think would be usefull to collect:
Parsing Strings Extract 3 numbers from a string into 3 variables:
a, b, c = map(int, split(&amp;quot;11 12 13&amp;quot;))  Initialization There are some gotchas with Julia initialization if you come from C/C++ background although this should not be so odd to Python or Ruby developers.</description>
    </item>
    
    <item>
      <title>Beautiful Julia: Cool language constructs and Tricks for Beginners</title>
      <link>http://translusion.github.com/posts/beautiful-julia/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/beautiful-julia/</guid>
      <description>I just read this blog about cool language constructs in Python. Before clicking it I thought to myself: are there cool things only Python can do or could I easily replicate this in my favorite script language Julia?
So without further ado, her are some examples.
Reverse an iterable There are two ways of doing this
 julia&amp;gt; a = [1, 2, 4] 3-element Array{Int64,1}: 1 2 4  The most obvious way is the reverse function</description>
    </item>
    
    <item>
      <title>Munching Data with Julia</title>
      <link>http://translusion.github.com/posts/munchingdata-julia/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/munchingdata-julia/</guid>
      <description>I&amp;rsquo;ve recently performed a survey at my work using Google form, unfortunatle the data wasn&amp;rsquo;t usable right out of the box, because it my company allowed people to register an answer multiple times, but one person should just have one vote.
I chose to clean the data with the Julia programming language, which might not be the best choice for this sort of thing. Not because julia isn&amp;rsquo;t suited but because SQL, sed or awk might do such a specialized and simple task faster.</description>
    </item>
    
  </channel>
</rss>