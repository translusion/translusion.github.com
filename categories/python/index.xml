<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Trans lusion</title>
    <link>http://translusion.github.com/categories/python/</link>
    <description>Recent content in Python on Trans lusion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://translusion.github.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beautiful Julia: Cool language constructs and Tricks for Beginners</title>
      <link>http://translusion.github.com/posts/beautiful-julia/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/beautiful-julia/</guid>
      <description>

&lt;p&gt;I just read &lt;a href=&#34;http://www.hackerearth.com/notes/praveen97uma/beautiful-python-some-cool-language-constructs-and-tricks-for-beginners/&#34;&gt;this blog&lt;/a&gt; about cool language constructs in Python. Before clicking it I thought to myself: are there cool things only Python can do or could I easily replicate this in my favorite script language &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;So without further ado, her are some examples.&lt;/p&gt;

&lt;h3 id=&#34;reverse-an-iterable:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Reverse an iterable&lt;/h3&gt;

&lt;p&gt;There are two ways of doing this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a = [1, 2, 4]
 3-element Array{Int64,1}:
  1
  2
  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious way is the &lt;code&gt;reverse&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; reverse(a)
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can also do something similar to the Python example, exept Julia requires you to be a bit more explicit about the start and end of the slice&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a[end:-1:1]
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This of course works for any types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; reverse(b)
(4,3,2)

julia&amp;gt; b[end:-1:1]
(4,3,2)

julia&amp;gt; c = &amp;quot;This is a string&amp;quot;
&amp;quot;This is a string&amp;quot;

julia&amp;gt; reverse(c)
&amp;quot;gnirts a si sihT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Julia follows the Ruby convention of suffixing with &lt;code&gt;!&lt;/code&gt; if the function is mutating, so we can be confident these functions created copies.&lt;/p&gt;

&lt;h3 id=&#34;swapping-the-values-of-two-variables:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Swapping the values of two variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; a, b = 1, 2
(1,2)

julia&amp;gt; a, b = b, a
(2,1)

julia&amp;gt; a
2

julia&amp;gt; b
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the python example, the author Praveen Kumar disassembled the Python code to demonstrate how it worked by showing the bytecode. That will be quite different for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; as Julia JITs different implementations based on the types of arguments. That is why Julia is so fast. E.g. when we define a function that swaps in Julia we get a generic function which will be specialized when called by the Just in Time compiler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; foo(a, b) = a, b = b, a
foo (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when dumping the assembly with &lt;code&gt;code_native&lt;/code&gt; we have to specify what the types of arguments  will be as second argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_native(foo, (Int, Int))
    .section    __TEXT,__text,regular,pure_instructions
Filename: none
Source line: 1
    push    RBP
    mov RBP, RSP
Source line: 1
    movq    XMM1, RDI
    movq    XMM0, RSI
    punpcklqdq  XMM0, XMM1      ## xmm0 = xmm0[0],xmm1[0]
    pop RBP
    ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want the bytecode like Python we get something that I consider less readable as it is LLVM based which contains a lot of type information to be able to generate efficient machien code output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_llvm(foo, (Int, Int))

define &amp;lt;2 x i64&amp;gt; @&amp;quot;julia_foo;20220&amp;quot;(i64, i64) {
top:
  %2 = insertelement &amp;lt;2 x i64&amp;gt; undef, i64 %1, i32 0, !dbg !1422, !julia_type !1423
  %3 = insertelement &amp;lt;2 x i64&amp;gt; %2, i64 %0, i32 1, !dbg !1422, !julia_type !1423
  ret &amp;lt;2 x i64&amp;gt; %3, !dbg !1422
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn&amp;rsquo;t obviously readable so we need to consult the &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html&#34;&gt;LLVM reference&lt;/a&gt; manual. &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html#i_insertelement&#34;&gt;insertelement&lt;/a&gt; is instruction which insert an element into a vector at given index.&lt;/p&gt;

&lt;p&gt;First part &lt;code&gt;&amp;lt;2 x i64&amp;gt;&lt;/code&gt; is a type annotation saying we are operating on a 2 element 64 bit integer vector.&lt;/p&gt;

&lt;p&gt;First argument is the vector register to operate on. In the first case that is &lt;code&gt;undef&lt;/code&gt; while in the next line it is &lt;code&gt;%2&lt;/code&gt;, which is where the result of the first line was put.&lt;/p&gt;

&lt;p&gt;Second argument &lt;code&gt;i64 %1&lt;/code&gt; says we are inserting a 64 bit integer element. Where is given in third argument: &lt;code&gt;i32 0&lt;/code&gt;. Insert at index 0 (given as a 32 bit integer).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave it as a readers excercise to figure out exactly how this performs a swap as going into the nitty bitty details of this was not the intention of this blog post.&lt;/p&gt;

&lt;h3 id=&#34;enumerate:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Enumerate&lt;/h3&gt;

&lt;p&gt;Interestingly the &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; approach for iterating over both index and value is almost identical to that of Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; for (index, value) in enumerate([&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;zoo&amp;quot;])
         println(index, &amp;quot; &amp;quot; , value)
       end
1 foo
2 bar
3 zoo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;splitting-a-string-into-a-list-of-words-and-joining-them-back:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;Splitting a string into a list of words and joining them back&lt;/h3&gt;

&lt;p&gt;Splitting and joining is similar to Python except Julia isn&amp;rsquo;t really object oriented so function name comes first as Julia uses multiple dispatch to decide which implementation to call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; b = split(&amp;quot;This is a string&amp;quot;)
4-element Array{SubString{ASCIIString},1}:
 &amp;quot;This&amp;quot;  
 &amp;quot;is&amp;quot;    
 &amp;quot;a&amp;quot;     
 &amp;quot;string&amp;quot;

julia&amp;gt; join(b, &amp;quot; &amp;quot;)
&amp;quot;This is a string&amp;quot;

julia&amp;gt; join(b, &amp;quot;, &amp;quot;)
&amp;quot;This, is, a, string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesting functions call is sometimes hard to read, so Julia offers the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator to write the code in similar sequence as with object oriented languages .e.g:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; &amp;quot;This is a string&amp;quot; |&amp;gt; split |&amp;gt; join
&amp;quot;Thisisastring&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehensions:cd102e3cfa31e3f431f8e244b481d2f3&#34;&gt;List Comprehensions&lt;/h3&gt;

&lt;p&gt;The traditional imperative way transforming on list to a new one is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = String[]
0-element Array{String,1}

julia&amp;gt; for word in L
           push!(M, word[1:3])
       end

julia&amp;gt; M
4-element Array{String,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite similar to the Python example except Julia lists havea type so you have to specify that it is a String. You can create a python like array but then you need to specify that it takes any element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = Any[]
0-element Array{Any,1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With list comperhensions you can do this more elegantly with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = [word[1:3] for word in L]
4-element Array{Any,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; it would be more idiomatic to express what you are doing. E.g. in this case we are mapping from one array to another which we can express like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = map(word -&amp;gt;  word[1:3], L)
4-element Array{ASCIIString,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to filter a list by producing a new list containg only the elements with length greater than 5 we would do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for word in L
  if length(word) &amp;gt; 5
    push!(M, word)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Python we could solve this with a list comperhension however with Julia you have to explicity state that you are filtering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M = filter(word -&amp;gt; length(word) &amp;gt; 5, L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for this is that Julia has bultin support for multidimensional arrays, given that it was designed for scientific computing where this is important. There is no natural way to filter a multi dimensional array, as e.g. every row in a matrix needs to have the same number of columns.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to Swift for Python developers</title>
      <link>http://translusion.github.com/posts/swift_compared_to_python/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/swift_compared_to_python/</guid>
      <description>

&lt;p&gt;While Swift fundamentally isn&amp;rsquo;t very much like Python, it looks as if it has a number of similarities on the surface. For instance both have different REPL environments. These are great ways of learning how to code. I can use the Python REPL as a calculator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 2 + 3
5
&amp;gt;&amp;gt;&amp;gt; 10 + 2 - 5
7
&amp;gt;&amp;gt;&amp;gt; 3.5 * 2
7.0
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do much the same with Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1&amp;gt; 2 + 3
$R0: Int = 5
  2&amp;gt; 10 + 2 - 5
$R1: Int = 7
  3&amp;gt; 3.5 * 2
$R2: Double = 7
  4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this is quite similar, we can already get a hint here that Swift is different and cares a lot more about type. Along with all results we can see that Swift derives the type of the result. Swift is however a lot stricter language. In Python I can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = 4
&amp;gt;&amp;gt;&amp;gt; y = 5
&amp;gt;&amp;gt;&amp;gt; z = x + y
&amp;gt;&amp;gt;&amp;gt; z
9
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite the fact that &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; does not exist already. By assigning we created them. So there is no way to avoid having the accident of thinking you are assigning to a new variable when in fact you are overwriting the value of an existing one. In Swift if we try this we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    4&amp;gt; x = 4
error: use of unresolved identifier &#39;x&#39;
x = 4
^

    4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead we have to write &lt;code&gt;var&lt;/code&gt; to indicate we are creating a new variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 4&amp;gt; var x = 4
x: Int = 4
  5&amp;gt; var y = 5
y: Int = 5
  6&amp;gt; var z = x + y
z: Int = 9
  7&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can assign new values to these&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    7&amp;gt; x = 30
    8&amp;gt; x
$R3: Int = 30
    9&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However if we made the variable constant by using &lt;code&gt;let&lt;/code&gt; we could not:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 12&amp;gt; let x = 4
x: Int = 4
 13&amp;gt; x = 5
error: cannot assign to &#39;let&#39; value &#39;x&#39;
x = 5
~ ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift is also a lot more strict about not mixing types. While you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     13&amp;gt; 2.3 + 3
$R4: Double = 5.2999999999999998
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can&amp;rsquo;t do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 14&amp;gt; let x = 2.3
x: Double = 2.2999999999999998
 15&amp;gt; let y = 3
y: Int = 3
 16&amp;gt; x + y
error: cannot invoke &#39;+&#39; with an argument list of type &#39;(Double, Int)&#39;
x + y
~~^~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will have to explicitly convert the values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 17&amp;gt; x + Double(y)
$R6: Double = 5.2999999999999998
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;type-annotation:202d4a02dbc032c9d4c6628af62032bb&#34;&gt;Type annotation&lt;/h2&gt;

&lt;p&gt;Sometimes Swift will not be able to guess what type you wanted a variable to be. E.g. Swift could not know that &lt;code&gt;3&lt;/code&gt; was supposed to be a &lt;code&gt;Double&lt;/code&gt;. But what you can do is either write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1&amp;gt; let y = 3.0
y: Double = 3 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you could annotate the variable y with the type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  2&amp;gt; let y : Double = 3
y: Double = 3 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;arrays-and-dictionaries:202d4a02dbc032c9d4c6628af62032bb&#34;&gt;Arrays and Dictionaries&lt;/h2&gt;

&lt;p&gt;One of the nice things about Python the batteries included approach. We get usefull data types like arrays and dictionaries built into the language. So we can easily create arrays and dictionaries and manipulate them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; numbers = [2, 4, 6, 8]
&amp;gt;&amp;gt;&amp;gt; squared = map(lambda x: x*x, numbers)
&amp;gt;&amp;gt;&amp;gt; squared[0:3]
[4, 16, 36] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift follows a similar philosophy and allows you to create collections of objects with succint syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  4&amp;gt; let numbers = [2, 4, 6, 8] 
numbers: [Int] = 4 values {
  [0] = 2
  [1] = 4
  [2] = 6
  [3] = 8
}
  5&amp;gt; let squared = map(numbers, {x in x*x}) 
squared: [Int] = 4 values {
  [0] = 4
  [1] = 16
  [2] = 36
  [3] = 64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is very similar. But Swift has a number of alternative ways to do this with ruby inspired syntax sugar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  8&amp;gt; let squared = map(numbers) {x in x*x}
squared: [Int] = 4 values {
  [0] = 4
  [1] = 16
  [2] = 36
  [3] = 64
}
  9&amp;gt; let squared = numbers.map {x in x*x} 
squared: [Int] = 4 values {
  [0] = 4
  [1] = 16
  [2] = 36
  [3] = 64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To slice arrays we can either do that with a closed &lt;code&gt;...&lt;/code&gt; or open interval &lt;code&gt;..&amp;lt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  6&amp;gt; squared[0...3]
$R0: Slice&amp;lt;Int&amp;gt; = 4 values {
  [0] = 4
  [1] = 16
  [2] = 36
  [3] = 64
}
  7&amp;gt; squared[0..&amp;lt;3]
$R1: Slice&amp;lt;Int&amp;gt; = 3 values {
  [0] = 4
  [1] = 16
  [2] = 36
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions:202d4a02dbc032c9d4c6628af62032bb&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;With python you can easily create a function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def add(a, b):
    return a + b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However that is not going to work in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 21&amp;gt; func add(a, b) { 
 22.     return a + b 
 23. }    
error: use of undeclared type &#39;a&#39;
func add(a, b) {
         ^
error: use of undeclared type &#39;b&#39;
func add(a, b) {
            ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because Swift needs to know what the type of your variables are. Unlike like our previous example where we assigned a value right away, there is no way for Swift to know what the type of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is going to be. It can&amp;rsquo;t infer it, so we have annotate the variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func add(a: Int, b: Int) -&amp;gt; Int {
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this has some limitations compared to the Python example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 4&amp;gt; add(2, 3)
$R0: Int = 5
  5&amp;gt; add(2.0, 3.3)
error: cannot convert the expression&#39;s type &#39;(FloatLiteralConvertible, FloatLiteralConvertible)&#39; to type &#39;Int&#39;
add(2.0, 3.3)
^~~~~~~~~~~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generics:202d4a02dbc032c9d4c6628af62032bb&#34;&gt;Generics&lt;/h2&gt;

&lt;p&gt;Python allowed us to use any type of number, but now we have limited ourselves to integers. We can&amp;rsquo;t e.g. use float values. The Swift solution for this is Generics as found in C#, Java and many other languages. If this had been C++ I could have written something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func add&amp;lt;T&amp;gt;(a: T, b: T) -&amp;gt; T {
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To indicate that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; can be of any type but they have to be of the same type &lt;code&gt;T&lt;/code&gt;. Likewise with the result. However this would give us the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: cannot invoke &#39;+&#39; with an argument list of type &#39;(T, T)&#39;
return a + b
       ~~^~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason being that an arbitrary type &lt;code&gt;T&lt;/code&gt; doesn&amp;rsquo;t support adding. C++ solves this problem by checking every use of &lt;code&gt;add()&lt;/code&gt; in the program and making sure only types which support &lt;code&gt;+&lt;/code&gt; is provided as arguments. But that is actually a terrible solution as it produces errors inside the function at the offending line. Thus users of a third party library has to understand how a third party function is implemented. So the Swift way of doing this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func add&amp;lt;T: Addable&amp;gt;(a: T, b: T) -&amp;gt; T {
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To indicate that that the type &lt;code&gt;T&lt;/code&gt; has to implement the protocol &lt;code&gt;Addable&lt;/code&gt;. A protocol is like a C# or Java interface. It lists functions which any class which wants to adhere to the protocol has to implement. In this case we say that &lt;code&gt;T&lt;/code&gt; has to be of a type that support the &lt;code&gt;+&lt;/code&gt; operator. Unfortunatly no &lt;code&gt;Addable&lt;/code&gt; protocol exists in Swift. In fact Swift is at the moment quite lacking in protocols. The whole Swift standard library is quite tiny at the momment. So the above code will give the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    error: use of undeclared type &#39;Addable&#39;
func add&amp;lt;T: Addable&amp;gt;(a: T, b: T) -&amp;gt; T {
            ^~~~~~~ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus we have to specify the &lt;code&gt;Addable&lt;/code&gt; protocol ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol Addable {
    func +(a: Self, b: Self) -&amp;gt; Self
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The use of &lt;code&gt;Self&lt;/code&gt; looks strange. Self is a sort of placeholder for the type of the object the method is being invoked on. So e.g. when &lt;code&gt;+&lt;/code&gt; is being invoked on an &lt;code&gt;Int&lt;/code&gt; object then &lt;code&gt;Self&lt;/code&gt; is the same as &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have the protocol but that only takes us half way. No concrete type is actually implementing this protocol. If this was Java or C++ that would be the end of this, because we would have had to implement our own number types somehow. Existing types can&amp;rsquo;t implement a new interface. Except in Swift you can. We can add methods to existing types or have existing types implement new protocols through extensions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Int: Addable {}
extension Double: Addable {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This specifies that &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; implements &lt;code&gt;Addable&lt;/code&gt;. Notice we don&amp;rsquo;t have to actually implement any methods ourselves because &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; already have the &lt;code&gt;+&lt;/code&gt; method/operator. Now we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1&amp;gt; add(1, 2)
$R0: (Int) = 4
  2&amp;gt; add(2.0, 3.0)
$R1: (Double) = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However if we use a &lt;code&gt;Float&lt;/code&gt; we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  3&amp;gt; let x : Float = 2
x: Float = 2
  4&amp;gt; let y : Float = 3
y: Float = 3 
  5&amp;gt; add(x, y)
error: Type &#39;Float&#39; does not conform to protocol &#39;Addable&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get an error because we have not specified that &lt;code&gt;Float&lt;/code&gt; implements our &lt;code&gt;Addable&lt;/code&gt; protocol.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>