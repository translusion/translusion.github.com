<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Translusion</title>
    <link>http://translusion.github.com/categories/programming/</link>
    <description>Recent content in Programming on Translusion</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© Erik Engheim 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 04 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://translusion.github.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Julia One Liners compared to Scala</title>
      <link>http://translusion.github.com/posts/julia-one-liners/</link>
      <pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-one-liners/</guid>
      <description>This was inspired by the blog post 10 Scala One Liners to Impress Your Friends.
1. Multiple Each Item in a List by 2 Original Scala version
(1 to 10) map { _ * 2 }  I think the Julia version is clearer. The x-&amp;gt;2x notation for anonymous function looks very similar to regular mathematical notation.
map(x-&amp;gt;2x, 1:10)  2. Sum a List of Numbers Sums numbers from 1 to 1000 in Scala either by using reduceLeft or sum.</description>
    </item>
    
    <item>
      <title>Tricks in Julia</title>
      <link>http://translusion.github.com/posts/julia-tricks/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/julia-tricks/</guid>
      <description>After doing various small Julia projects I&amp;rsquo;ve had to learn a number of tricks or solutions to small problems, that I think would be usefull to collect:
Parsing Strings Extract 3 numbers from a string into 3 variables:
a, b, c = map(int, split(&amp;quot;11 12 13&amp;quot;))  Initialization There are some gotchas with Julia initialization if you come from C/C++ background although this should not be so odd to Python or Ruby developers.</description>
    </item>
    
    <item>
      <title>Beautiful Julia: Cool language constructs and Tricks for Beginners</title>
      <link>http://translusion.github.com/posts/beautiful-julia/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/beautiful-julia/</guid>
      <description>I just read this blog about cool language constructs in Python. Before clicking it I thought to myself: are there cool things only Python can do or could I easily replicate this in my favorite script language Julia?
So without further ado, her are some examples.
Reverse an iterable There are two ways of doing this
 julia&amp;gt; a = [1, 2, 4] 3-element Array{Int64,1}: 1 2 4  The most obvious way is the reverse function</description>
    </item>
    
    <item>
      <title>Dynamic Typing as a Paradigm</title>
      <link>http://translusion.github.com/posts/dynamic_typing_as_a_paradigm/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/dynamic_typing_as_a_paradigm/</guid>
      <description>The Dynamic vs Static Typing debate has been going on for decades and never seems to end. While I like both static and dynamic programming languages I probably have a slight preference for dynamic typing. However I feel of the two types of languages I feel the dynamic ones are the ones that are most profoundly misunderstood. The popular blog post Dynamic languages are static languages illustrates the misunderstanding very well.</description>
    </item>
    
    <item>
      <title>An introduction to Swift for Python developers</title>
      <link>http://translusion.github.com/posts/swift_compared_to_python/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/swift_compared_to_python/</guid>
      <description>While Swift fundamentally isn&amp;rsquo;t very much like Python, it looks as if it has a number of similarities on the surface. For instance both have different REPL environments. These are great ways of learning how to code. I can use the Python REPL as a calculator:
&amp;gt;&amp;gt;&amp;gt; 2 + 3 5 &amp;gt;&amp;gt;&amp;gt; 10 + 2 - 5 7 &amp;gt;&amp;gt;&amp;gt; 3.5 * 2 7.0 &amp;gt;&amp;gt;&amp;gt;  We can do much the same with Swift:</description>
    </item>
    
    <item>
      <title>Comparison of the Go tour with Swift</title>
      <link>http://translusion.github.com/posts/a_comparison_of_go_and_swift/</link>
      <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/a_comparison_of_go_and_swift/</guid>
      <description>One of my favorite programming languages is Go, so I thought it might be fun to do a bit of a superficial comparison of it with Swift which I am hoping will be a new favorite given that I work professionally as an iOS developer. Go takes such a bare bones and simple approach to programming that one can quite quickly get a sense of what it is like using it.</description>
    </item>
    
    <item>
      <title>Swift is Kotlin</title>
      <link>http://translusion.github.com/posts/swift-is-kotlin/</link>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://translusion.github.com/posts/swift-is-kotlin/</guid>
      <description>Around the internet people are saying Apple&amp;rsquo;s Swift looks like C#, JavaScript etc. This of course is just in the most superficial manner. E.g. both JavaScript and Swift has the var keyword. But it means completely different things since Swift is statically typed and JavaScript is not.
Anyway being generally curious about programming languages I could see similarities in Swift with Rust, Go, Scala and Ruby. However all these languages differ from Swift in quite a number of ways.</description>
    </item>
    
  </channel>
</rss>